"""Add is_playbook and playbook_name to Action model

Revision ID: 0fe4bd50732f
Revises: add_playbook_id_to_action
Create Date: 2024-08-05 18:06:26.107117

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect


# revision identifiers, used by Alembic.
revision = '0fe4bd50732f'
down_revision = 'add_playbook_id_to_action'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Check if playbook_action table exists before creating it
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    tables = inspector.get_table_names()
    if 'playbook_action' not in tables:
        op.create_table('playbook_action',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('playbook_id', sa.Integer(), nullable=False),
        sa.Column('phase', sa.String(length=50), nullable=False),
        sa.Column('title', sa.String(length=100), nullable=False),
        sa.Column('description', sa.Text(), nullable=False),
        sa.ForeignKeyConstraint(['playbook_id'], ['playbook.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
    # Check if columns exist before adding them
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    columns = inspector.get_columns('action')
    column_names = [column['name'] for column in columns]

    with op.batch_alter_table('action', schema=None) as batch_op:
        if 'is_playbook' not in column_names:
            batch_op.add_column(sa.Column('is_playbook', sa.Boolean(), nullable=True))
        if 'playbook_name' not in column_names:
            batch_op.add_column(sa.Column('playbook_name', sa.String(length=100), nullable=True))

    # Create a new table for user with the updated password column
    op.create_table('user_new',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('username', sa.String(length=80), nullable=False),
        sa.Column('password', sa.String(length=255), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('username')
    )

    # Copy data from the old table to the new one
    op.execute('INSERT INTO user_new SELECT id, username, password FROM user')

    # Drop the old table and rename the new one
    op.drop_table('user')
    op.rename_table('user_new', 'user')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Create a new table for user with the old password column
    op.create_table('user_old',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('username', sa.String(length=80), nullable=False),
        sa.Column('password', sa.String(length=120), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('username')
    )

    # Copy data from the current table to the old one
    op.execute('INSERT INTO user_old SELECT id, username, password FROM user')

    # Drop the current table and rename the old one
    op.drop_table('user')
    op.rename_table('user_old', 'user')

    # Check if columns exist before dropping them
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    columns = inspector.get_columns('action')
    column_names = [column['name'] for column in columns]

    with op.batch_alter_table('action', schema=None) as batch_op:
        if 'playbook_name' in column_names:
            batch_op.drop_column('playbook_name')
        if 'is_playbook' in column_names:
            batch_op.drop_column('is_playbook')

    # Check if playbook_action table exists before dropping it
    if op.has_table('playbook_action'):
        op.drop_table('playbook_action')
    # ### end Alembic commands ###
